{"version":3,"sources":["src/marionette.templatecache.js"],"names":["TemplateCache","templateId","_","extend","template","data","Error","isFunction","get","options","cachedTemplate","this","templateCaches","load","i","args","Array","_len","_key","arguments","length","prototype","compiledTemplate","loadTemplate","compileTemplate","$template","Backbone","$","html","rawTemplate"],"mappings":";;;;;;;;;;;kZAQA,IAAMA,EAAgB,SAASC,QACxBA,WAAaA,UAMpBC,EAAEC,OAAOH,4BAAe,SAOfI,EAAUC,OACVD,QACG,IAAIE,MAAM,yEAGGJ,EAAEK,WAAWH,GAAYA,EAAWJ,EAAcQ,IAAIJ,IAEvDC,QAdA,SAoBlBJ,EAAYQ,OACVC,EAAiBC,KAAKC,eAAeX,UAEpCS,MACc,IAAIV,EAAcC,QAC9BW,eAAeX,GAAcS,GAG7BA,EAAeG,KAAKJ,UA5BP,mBAuChBK,OAAAA,qBADGC,EAAMC,MAAAC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,MAAAA,GAAAC,UAAAD,OAEPE,EAASL,EAAKK,UAEhBA,EAAS,MACNN,EAAI,EAAGA,EAAIM,EAAQN,WACfH,KAAKC,eAAeG,EAAKD,cAG7BF,qBAQXV,EAAEC,OAAOH,EAAcqB,gBAAW,SAG3BZ,MAECE,KAAKW,wBACAX,KAAKW,qBAIRlB,EAAWO,KAAKY,aAAaZ,KAAKV,WAAYQ,eAC/Ca,iBAAmBX,KAAKa,gBAAgBpB,EAAUK,GAEhDE,KAAKW,+BAbkB,SAqBnBrB,EAAYQ,OACjBgB,EAAYC,EAASC,EAAE1B,OAExBwB,EAAUL,aACP,IAAId,MAAJ,6BAAuCL,EAAvC,YAEDwB,EAAUG,wBA3Ba,SAkChBC,EAAapB,UACpBP,EAAEE,SAASyB,EAAapB","file":"marionette.templatecache.min.js","sourcesContent":["// Template Cache\n// --------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nconst TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n\n  templateCaches: {},\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function.\n  render(template, data) {\n    if (!template) {\n      throw new Error('Cannot render the template since its false, null or undefined.');\n    }\n\n    const templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  },\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get(templateId, options) {\n    let cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear(...args) {\n    let i;\n    const length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    const template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate(templateId, options) {\n    const $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new Error(`Could not find template: \"${templateId}\"`);\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n"]}